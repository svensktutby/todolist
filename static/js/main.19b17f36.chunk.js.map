{"version":3,"sources":["api/todolistsApi.ts","features/Login/authReducer.ts","hooks/useTypedSelector.ts","utils/errorUtils.ts","app/appReducer.ts","features/TodolistsList/todolistsReducer.ts","features/TodolistsList/tasksReducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","features/Error404/Error404.tsx","app/App.tsx","serviceWorker.ts","app/store.ts","index.tsx"],"names":["ResultCode","TaskStatus","TaskPriority","ActionType","useTypedSelector","useSelector","handleServerAppError","messages","dispatch","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","API","axios","create","baseURL","withCredentials","headers","process","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","initialState","isLoggedIn","setIsLoggedInAC","value","type","SET_IS_LOGGED_IN","payload","status","isInitialized","SET_STATUS","SET_ERROR","changeTodolistTitleAC","CHANGE_TODOLIST_TITLE","changeTodolistEntityStatusAC","CHANGE_TODOLIST_ENTITY_STATUS","removeTaskAC","REMOVE_TASK","updateTaskAC","UPDATE_TASK","setTasksAC","tasks","SET_TASKS","updateTaskAsync","domainModel","getState","a","allTaskFromState","tasksForCurrentTodolist","task","find","t","description","priority","startDate","deadline","resultCode","Success","AddItemForm","React","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trimmedTitle","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","useStyles","makeStyles","text","wordBreak","fontSize","EditableSpan","props","classes","editMode","setEditMode","onBlur","newTitle","autoFocus","Typography","className","onDoubleClick","root","display","alignItems","removeTaskButton","marginLeft","Task","removeTaskHandler","useCallback","removeTask","statusTaskHandler","changeStatus","checked","Completed","New","changeTaskTitle","Checkbox","Delete","todoListTitle","removeTodoListButton","taskList","paddingLeft","listStyleType","buttonGroupWrapper","textAlign","buttonGroup","button","flexGrow","Todolist","demo","useDispatch","useEffect","todolist","items","addTask","removeTodoListHandler","removeTodoList","changeTodoListTitle","allClickHandler","changeFilter","activeClickHandler","completedClickHandler","tasksForTodolist","filter","map","entityStatus","ButtonGroup","size","Button","theme","addTodoListContainer","padding","spacing","paper","TodolistsList","todolists","state","auth","SET_TODOLISTS","removeTaskAsync","item","ADD_TASK","addTaskAsync","CHANGE_TODOLIST_FILTER","changeTodolistFilterAC","REMOVE_TODOLIST","removeTodolistAsync","changeTodolistTitleAsync","addTodoList","ADD_TODOLIST","addTodolistAsync","Grid","container","tl","Paper","to","Alert","elevation","ErrorSnackbar","app","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","checkboxLabel","marginBottom","initialValues","email","password","rememberMe","validationSchema","yup","required","min","Login","formik","useFormik","onSubmit","values","formikHelpers","loginValues","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","Link","href","target","rel","FormGroup","margin","getFieldProps","touched","Boolean","errors","FormControlLabel","control","body","backgroundColor","palette","primary","dark","boxSizing","flexDirection","height","paddingTop","paddingBottom","grey","footer","marginTop","footerText","link","position","textDecoration","content","zIndex","bottom","left","width","opacity","transitionDuration","transitions","duration","standard","transitionProperty","outline","Error404","component","fontFamily","menuButton","marginRight","appBar","linearProgress","right","circularProgressWrapper","justifyContent","minHeight","App","SET_INITIALIZED","logoutHandler","AppBar","Toolbar","edge","aria-label","Menu","LinearProgress","Container","fixed","exact","path","render","from","CircularProgress","window","location","hostname","match","rootReducer","combineReducers","action","todoListId","TodolistsActionType","stateCopy","reduce","acc","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","middleware","thunk","enhancedStore","applyMiddleware","store","createStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.19b17f36.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios';\n\nconst API = axios.create({\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n  withCredentials: true,\n  headers: {\n    'API-KEY': process.env.REACT_APP_API_KEY,\n  },\n});\n\nexport const todolistsAPI = {\n  getTodolists(): Promise<AxiosResponse<Array<TodolistType>>> {\n    return API.get<Array<TodolistType>>('todo-lists');\n  },\n  createTodolist(\n    title: string,\n  ): Promise<AxiosResponse<ResponseType<TodolistResponseDataType>>> {\n    return API.post<ResponseType<TodolistResponseDataType>>('todo-lists', {\n      title,\n    });\n  },\n  deleteTodolist(id: string): Promise<AxiosResponse<ResponseType>> {\n    return API.delete<ResponseType>(`todo-lists/${id}`);\n  },\n  updateTodolistTitle(\n    id: string,\n    title: string,\n  ): Promise<AxiosResponse<ResponseType>> {\n    return API.put<ResponseType>(`todo-lists/${id}`, {\n      title,\n    });\n  },\n  getTasks(todolistId: string): Promise<AxiosResponse<TasksResponseType>> {\n    return API.get<TasksResponseType>(`todo-lists/${todolistId}/tasks`);\n  },\n  createTask(\n    todolistId: string,\n    title: string,\n  ): Promise<AxiosResponse<ResponseType<TaskResponseDataType>>> {\n    return API.post<ResponseType<TaskResponseDataType>>(\n      `todo-lists/${todolistId}/tasks`,\n      {\n        title,\n      },\n    );\n  },\n  deleteTask(\n    todolistId: string,\n    taskId: string,\n  ): Promise<AxiosResponse<ResponseType>> {\n    return API.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n  },\n  updateTask(\n    todolistId: string,\n    taskId: string,\n    model: UpdateTaskModelType,\n  ): Promise<AxiosResponse<ResponseType<TaskResponseDataType>>> {\n    return API.put<ResponseType<TaskResponseDataType>>(\n      `todo-lists/${todolistId}/tasks/${taskId}`,\n      model,\n    );\n  },\n};\n\nexport const authAPI = {\n  me(): Promise<AxiosResponse<ResponseType<MeResponseType>>> {\n    return API.get<ResponseType<MeResponseType>>('/auth/me');\n  },\n  login(\n    data: LoginValuesType,\n  ): Promise<AxiosResponse<ResponseType<LoginResponseType>>> {\n    return API.post<ResponseType<LoginResponseType>>('auth/login', data);\n  },\n  logout(): Promise<AxiosResponse<ResponseType>> {\n    return API.delete<ResponseType>('auth/login');\n  },\n};\n\n/** Types */\nexport enum ResultCode {\n  Success = 0,\n  Error = 1,\n}\n\nexport enum TaskStatus {\n  New = 0,\n  InProgress = 1,\n  Completed = 2,\n  Draft = 3,\n}\n\nexport enum TaskPriority {\n  Low = 0,\n  Middle = 1,\n  Hi = 2,\n  Urgently = 3,\n  Later = 4,\n}\n\nexport type TodolistType = {\n  id: string;\n  title: string;\n  addedDate: string;\n  order: number;\n};\n\nexport type UpdateTaskModelType = {\n  title: string;\n  description: string;\n  status: TaskStatus;\n  priority: TaskPriority;\n  startDate: string;\n  deadline: string;\n};\n\nexport type TaskType = UpdateTaskModelType & {\n  id: string;\n  todoListId: string;\n  order: number;\n  addedDate: string;\n};\n\nexport type LoginValuesType = {\n  email: string;\n  password: string;\n  rememberMe: boolean;\n  captcha?: string;\n};\n\ntype TodolistResponseDataType = {\n  item: TodolistType;\n};\n\ntype TaskResponseDataType = {\n  item: TaskType;\n};\n\ntype TasksResponseType = {\n  items: Array<TaskType>;\n  totalCount: number;\n  error: string | null;\n};\n\ntype MeResponseType = {\n  id: number;\n  email: string;\n  login: string;\n};\n\ntype LoginResponseType = {\n  userId?: number;\n};\n\nexport type ResponseType<D = Record<string, unknown>> = {\n  resultCode: ResultCode;\n  messages: Array<string>;\n  data: D;\n};\n","/* eslint-disable import/no-cycle */\nimport { ThunkType } from '../../app/store';\nimport {\n  handleServerAppError,\n  handleServerNetworkError,\n} from '../../utils/errorUtils';\nimport { setAppStatusAC } from '../../app/appReducer';\n/* eslint-enable import/no-cycle */\n\nimport { LoginValuesType, authAPI, ResultCode } from '../../api/todolistsApi';\n\nexport enum ActionType {\n  SET_IS_LOGGED_IN = 'TL/LOGIN/SET_IS_LOGGED_IN',\n}\n\nconst initialState: AuthStateType = {\n  isLoggedIn: false,\n};\n\nexport const authReducer = (\n  state = initialState,\n  action: ActionsType,\n): AuthStateType => {\n  switch (action.type) {\n    case ActionType.SET_IS_LOGGED_IN:\n      return {\n        ...state,\n        isLoggedIn: action.payload.value,\n      };\n\n    default:\n      return state;\n  }\n};\n\n/** Actions */\nexport const setIsLoggedInAC = (value: boolean) =>\n  ({\n    type: ActionType.SET_IS_LOGGED_IN,\n    payload: {\n      value,\n    },\n  } as const);\n\n/** Thunks */\nexport const loginAsync = (\n  loginValues: LoginValuesType,\n): ThunkType<ActionsType> => async (dispatch) => {\n  dispatch(setAppStatusAC('loading'));\n\n  try {\n    const {\n      data: { resultCode, messages },\n    } = await authAPI.login(loginValues);\n\n    if (resultCode === ResultCode.Success) {\n      dispatch(setIsLoggedInAC(true));\n      dispatch(setAppStatusAC('succeeded'));\n    } else {\n      handleServerAppError(messages, dispatch);\n    }\n  } catch (error) {\n    handleServerNetworkError(error, dispatch);\n  }\n};\n\nexport const logoutAsync = (): ThunkType<ActionsType> => async (dispatch) => {\n  dispatch(setAppStatusAC('loading'));\n\n  try {\n    const {\n      data: { resultCode, messages },\n    } = await authAPI.logout();\n\n    if (resultCode === ResultCode.Success) {\n      dispatch(setIsLoggedInAC(false));\n      dispatch(setAppStatusAC('succeeded'));\n    } else {\n      handleServerAppError(messages, dispatch);\n    }\n  } catch (error) {\n    handleServerNetworkError(error, dispatch);\n  }\n};\n\n/** Types */\ntype ActionsType =\n  | ReturnType<typeof setIsLoggedInAC>\n  | ReturnType<typeof setAppStatusAC>;\n\nexport type AuthStateType = {\n  isLoggedIn: boolean;\n};\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\nimport { AppRootStateType } from '../app/store';\n\nexport const useTypedSelector: TypedUseSelectorHook<AppRootStateType> = useSelector;\n","import { Dispatch } from 'redux';\n\n/* eslint-disable import/no-cycle */\nimport { setAppErrorAC, setAppStatusAC } from '../app/appReducer';\n/* eslint-enable import/no-cycle */\n\nexport const handleServerAppError = (\n  messages: Array<string>,\n  dispatch: ErrorUtilsDispatchType,\n): void => {\n  if (messages.length) {\n    dispatch(setAppErrorAC(messages[0]));\n  } else {\n    dispatch(setAppErrorAC('Sorry, an unknown error occurred'));\n  }\n  dispatch(setAppStatusAC('failed'));\n};\n\nexport const handleServerNetworkError = (\n  error: { message: string },\n  dispatch: ErrorUtilsDispatchType,\n): void => {\n  dispatch(setAppErrorAC(error.message));\n  dispatch(setAppStatusAC('failed'));\n};\n\ntype ErrorUtilsDispatchType = Dispatch<\n  ReturnType<typeof setAppStatusAC> | ReturnType<typeof setAppErrorAC>\n>;\n","/* eslint-disable import/no-cycle */\nimport { ThunkType } from './store';\nimport {\n  handleServerAppError,\n  handleServerNetworkError,\n} from '../utils/errorUtils';\nimport { setIsLoggedInAC } from '../features/Login/authReducer';\n/* eslint-enable import/no-cycle */\nimport { authAPI, ResultCode } from '../api/todolistsApi';\n\nexport enum ActionType {\n  SET_STATUS = 'TL/APP/SET_STATUS',\n  SET_ERROR = 'TL/APP/SET_ERROR',\n  SET_INITIALIZED = 'TL/APP/SET_INITIALIZED',\n}\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed';\n\nconst initialState: AppStateType = {\n  status: 'idle',\n  error: null,\n  isInitialized: false,\n};\n\nexport const appReducer = (\n  state = initialState,\n  action: ActionsType,\n): AppStateType => {\n  switch (action.type) {\n    case ActionType.SET_STATUS:\n      return { ...state, status: action.payload.status };\n\n    case ActionType.SET_ERROR:\n      return { ...state, error: action.error };\n\n    case ActionType.SET_INITIALIZED:\n      return { ...state, isInitialized: action.payload.value };\n\n    default:\n      return state;\n  }\n};\n\n/** Actions */\nexport const setAppStatusAC = (status: RequestStatusType) =>\n  ({\n    type: ActionType.SET_STATUS,\n    payload: {\n      status,\n    },\n  } as const);\n\nexport const setAppErrorAC = (error: null | string) =>\n  ({\n    type: ActionType.SET_ERROR,\n    error,\n  } as const);\n\nexport const setAppInitializedAC = (value: boolean) =>\n  ({\n    type: ActionType.SET_INITIALIZED,\n    payload: {\n      value,\n    },\n  } as const);\n\n/** Thunks */\nexport const initializeAppAsync = (): ThunkType<ActionsType> => async (\n  dispatch,\n) => {\n  try {\n    const {\n      data: { resultCode, messages },\n    } = await authAPI.me();\n\n    if (resultCode === ResultCode.Success) {\n      dispatch(setIsLoggedInAC(true));\n    } else {\n      handleServerAppError(messages, dispatch);\n    }\n    dispatch(setAppInitializedAC(true));\n  } catch (error) {\n    handleServerNetworkError(error, dispatch);\n  }\n};\n\n/** Types */\nexport type AppStateType = {\n  status: RequestStatusType;\n  error: null | string;\n  isInitialized: boolean;\n};\n\ntype ActionsType =\n  | ReturnType<typeof setAppStatusAC>\n  | ReturnType<typeof setAppErrorAC>\n  | ReturnType<typeof setAppInitializedAC>\n  | ReturnType<typeof setIsLoggedInAC>;\n","/* eslint-disable import/no-cycle */\nimport { ThunkType } from '../../app/store';\nimport { RequestStatusType, setAppStatusAC } from '../../app/appReducer';\nimport {\n  handleServerAppError,\n  handleServerNetworkError,\n} from '../../utils/errorUtils';\n/* eslint-enable import/no-cycle */\n\nimport { ResultCode, todolistsAPI, TodolistType } from '../../api/todolistsApi';\n\nexport enum ActionType {\n  REMOVE_TODOLIST = 'TL/TODOLISTS/REMOVE_TODOLIST',\n  ADD_TODOLIST = 'TL/TODOLISTS/ADD_TODOLIST',\n  CHANGE_TODOLIST_TITLE = 'TL/TODOLISTS/CHANGE_TODOLIST_TITLE',\n  CHANGE_TODOLIST_FILTER = 'TL/TODOLISTS/CHANGE_TODOLIST_FILTER',\n  CHANGE_TODOLIST_ENTITY_STATUS = 'TL/TODOLISTS/CHANGE_TODOLIST_ENTITY_STATUS',\n  SET_TODOLISTS = 'TL/TODOLISTS/SET_TODOLISTS',\n}\n\nconst initialState: Array<TodolistDomainType> = [];\n\nexport const todolistsReducer = (\n  state = initialState,\n  action: ActionsType,\n): Array<TodolistDomainType> => {\n  switch (action.type) {\n    case ActionType.REMOVE_TODOLIST:\n      return state.filter((tl) => tl.id !== action.payload.id);\n\n    case ActionType.ADD_TODOLIST:\n      return [\n        {\n          ...action.payload.todolist,\n          filter: 'all',\n          entityStatus: 'idle',\n        },\n        ...state,\n      ];\n\n    case ActionType.CHANGE_TODOLIST_TITLE:\n      return state.map((tl) =>\n        tl.id === action.payload.id\n          ? { ...tl, title: action.payload.title }\n          : tl,\n      );\n\n    case ActionType.CHANGE_TODOLIST_FILTER:\n      return state.map((tl) =>\n        tl.id === action.payload.id\n          ? { ...tl, filter: action.payload.filter }\n          : tl,\n      );\n\n    case ActionType.CHANGE_TODOLIST_ENTITY_STATUS:\n      return state.map((tl) =>\n        tl.id === action.payload.id\n          ? { ...tl, entityStatus: action.payload.status }\n          : tl,\n      );\n\n    case ActionType.SET_TODOLISTS:\n      return action.payload.todolists.map((tl) => ({\n        ...tl,\n        filter: 'all',\n        entityStatus: 'idle',\n      }));\n\n    default:\n      return state;\n  }\n};\n\n/** Actions */\nexport const removeTodolistAC = (id: string) =>\n  ({\n    type: ActionType.REMOVE_TODOLIST,\n    payload: {\n      id,\n    },\n  } as const);\n\nexport const addTodolistAC = (todolist: TodolistType) =>\n  ({\n    type: ActionType.ADD_TODOLIST,\n    payload: {\n      todolist,\n    },\n  } as const);\n\nexport const changeTodolistTitleAC = (id: string, title: string) =>\n  ({\n    type: ActionType.CHANGE_TODOLIST_TITLE,\n    payload: {\n      id,\n      title,\n    },\n  } as const);\n\nexport const changeTodolistFilterAC = (filter: FilterValuesType, id: string) =>\n  ({\n    type: ActionType.CHANGE_TODOLIST_FILTER,\n    payload: {\n      id,\n      filter,\n    },\n  } as const);\n\nexport const changeTodolistEntityStatusAC = (\n  id: string,\n  status: RequestStatusType,\n) =>\n  ({\n    type: ActionType.CHANGE_TODOLIST_ENTITY_STATUS,\n    payload: {\n      id,\n      status,\n    },\n  } as const);\n\nexport const setTodolistsAC = (todolists: Array<TodolistType>) =>\n  ({\n    type: ActionType.SET_TODOLISTS,\n    payload: {\n      todolists,\n    },\n  } as const);\n\n/** Thunks */\nexport const fetchTodolistsAsync = (): ThunkType<ActionsType> => async (\n  dispatch,\n) => {\n  dispatch(setAppStatusAC('loading'));\n\n  try {\n    const { status, data } = await todolistsAPI.getTodolists();\n\n    if (status === 200) {\n      dispatch(setTodolistsAC(data));\n      dispatch(setAppStatusAC('succeeded'));\n    }\n  } catch (error) {\n    handleServerNetworkError(error, dispatch);\n  }\n};\n\nexport const removeTodolistAsync = (\n  todolistId: string,\n): ThunkType<ActionsType> => async (dispatch) => {\n  dispatch(setAppStatusAC('loading'));\n  dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'));\n\n  try {\n    const {\n      data: { resultCode, messages },\n    } = await todolistsAPI.deleteTodolist(todolistId);\n\n    if (resultCode === ResultCode.Success) {\n      dispatch(removeTodolistAC(todolistId));\n      dispatch(setAppStatusAC('succeeded'));\n    } else {\n      handleServerAppError(messages, dispatch);\n      dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'));\n    }\n  } catch (error) {\n    handleServerNetworkError(error, dispatch);\n    dispatch(changeTodolistEntityStatusAC(todolistId, 'failed'));\n  }\n};\n\nexport const addTodolistAsync = (\n  title: string,\n): ThunkType<ActionsType> => async (dispatch) => {\n  dispatch(setAppStatusAC('loading'));\n\n  try {\n    const {\n      data: { resultCode, messages, data },\n    } = await todolistsAPI.createTodolist(title);\n\n    if (resultCode === ResultCode.Success) {\n      dispatch(addTodolistAC(data.item));\n      dispatch(setAppStatusAC('succeeded'));\n    } else {\n      handleServerAppError(messages, dispatch);\n    }\n  } catch (error) {\n    handleServerNetworkError(error, dispatch);\n  }\n};\n\nexport const changeTodolistTitleAsync = (\n  id: string,\n  title: string,\n): ThunkType<ActionsType> => async (dispatch) => {\n  dispatch(changeTodolistEntityStatusAC(id, 'loading'));\n\n  try {\n    const {\n      data: { resultCode, messages },\n    } = await todolistsAPI.updateTodolistTitle(id, title);\n\n    if (resultCode === ResultCode.Success) {\n      dispatch(changeTodolistTitleAC(id, title));\n      dispatch(changeTodolistEntityStatusAC(id, 'succeeded'));\n    } else {\n      handleServerAppError(messages, dispatch);\n      dispatch(changeTodolistEntityStatusAC(id, 'failed'));\n    }\n  } catch (error) {\n    handleServerNetworkError(error, dispatch);\n    dispatch(changeTodolistEntityStatusAC(id, 'failed'));\n  }\n};\n\n/** Types */\ntype ActionsType =\n  | ReturnType<typeof removeTodolistAC>\n  | ReturnType<typeof addTodolistAC>\n  | ReturnType<typeof changeTodolistTitleAC>\n  | ReturnType<typeof changeTodolistFilterAC>\n  | ReturnType<typeof setTodolistsAC>\n  | ReturnType<typeof changeTodolistEntityStatusAC>\n  | ReturnType<typeof setAppStatusAC>;\n\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodolistDomainType = TodolistType & {\n  filter: FilterValuesType;\n  entityStatus: RequestStatusType;\n};\n","/* eslint-disable import/no-cycle */\nimport { ThunkType } from '../../app/store';\nimport {\n  ActionType as TodolistsActionType,\n  addTodolistAC,\n  removeTodolistAC,\n  setTodolistsAC,\n} from './todolistsReducer';\nimport { setAppErrorAC, setAppStatusAC } from '../../app/appReducer';\nimport {\n  handleServerAppError,\n  handleServerNetworkError,\n} from '../../utils/errorUtils';\n/* eslint-enable import/no-cycle */\n\nimport {\n  todolistsAPI,\n  ResultCode,\n  TaskStatus,\n  TaskPriority,\n  TaskType,\n  UpdateTaskModelType,\n} from '../../api/todolistsApi';\n\nexport enum ActionType {\n  REMOVE_TASK = 'TL/TASKS/REMOVE_TASK',\n  ADD_TASK = 'TL/TASKS/ADD_TASK',\n  UPDATE_TASK = 'TL/TASKS/UPDATE_TASK',\n  SET_TASKS = 'TL/TASKS/SET_TASKS',\n}\n\nconst initialState: TasksStateType = {};\n\nexport const tasksReducer = (\n  state = initialState,\n  action: ActionsType,\n): TasksStateType => {\n  switch (action.type) {\n    case ActionType.REMOVE_TASK:\n      return {\n        ...state,\n        [action.payload.todolistId]: state[action.payload.todolistId].filter(\n          (t) => t.id !== action.payload.taskId,\n        ),\n      };\n\n    case ActionType.ADD_TASK:\n      return {\n        ...state,\n        [action.payload.task.todoListId]: [\n          action.payload.task,\n          ...state[action.payload.task.todoListId],\n        ],\n      };\n\n    case ActionType.UPDATE_TASK:\n      return {\n        ...state,\n        [action.payload.todolistId]: state[action.payload.todolistId].map((t) =>\n          t.id === action.payload.taskId\n            ? { ...t, ...action.payload.model }\n            : t,\n        ),\n      };\n\n    case ActionType.SET_TASKS:\n      return {\n        ...state,\n        [action.payload.todolistId]: action.payload.tasks,\n      };\n\n    case TodolistsActionType.ADD_TODOLIST:\n      return { ...state, [action.payload.todolist.id]: [] };\n\n    case TodolistsActionType.REMOVE_TODOLIST: {\n      const stateCopy = { ...state };\n      delete stateCopy[action.payload.id];\n\n      return stateCopy;\n    }\n\n    case TodolistsActionType.SET_TODOLISTS:\n      return action.payload.todolists.reduce(\n        (acc, tl) => {\n          return { ...acc, [tl.id]: [] };\n        },\n        { ...state },\n      );\n\n    default:\n      return state;\n  }\n};\n\n/** Actions */\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\n  ({\n    type: ActionType.REMOVE_TASK,\n    payload: {\n      taskId,\n      todolistId,\n    },\n  } as const);\n\nexport const addTaskAC = (task: TaskType) =>\n  ({\n    type: ActionType.ADD_TASK,\n    payload: {\n      task,\n    },\n  } as const);\n\nexport const updateTaskAC = (\n  taskId: string,\n  model: UpdateDomainTaskModelType,\n  todolistId: string,\n) =>\n  ({\n    type: ActionType.UPDATE_TASK,\n    payload: {\n      taskId,\n      model,\n      todolistId,\n    },\n  } as const);\n\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\n  ({\n    type: ActionType.SET_TASKS,\n    payload: {\n      tasks,\n      todolistId,\n    },\n  } as const);\n\n/** Thunks */\nexport const fetchTasksAsync = (\n  todolistId: string,\n): ThunkType<ActionsType> => async (dispatch) => {\n  dispatch(setAppStatusAC('loading'));\n\n  try {\n    const {\n      status,\n      data: { items },\n    } = await todolistsAPI.getTasks(todolistId);\n\n    if (status === 200) {\n      dispatch(setTasksAC(items, todolistId));\n      dispatch(setAppStatusAC('succeeded'));\n    }\n  } catch (error) {\n    handleServerNetworkError(error, dispatch);\n  }\n};\n\nexport const removeTaskAsync = (\n  taskId: string,\n  todolistId: string,\n): ThunkType<ActionsType> => async (dispatch) => {\n  try {\n    const {\n      data: { resultCode, messages },\n    } = await todolistsAPI.deleteTask(todolistId, taskId);\n\n    if (resultCode === ResultCode.Success) {\n      dispatch(removeTaskAC(taskId, todolistId));\n      dispatch(setAppStatusAC('succeeded'));\n    } else {\n      handleServerAppError(messages, dispatch);\n    }\n  } catch (error) {\n    handleServerNetworkError(error, dispatch);\n  }\n};\n\nexport const addTaskAsync = (\n  title: string,\n  todolistId: string,\n): ThunkType<ActionsType> => async (dispatch) => {\n  dispatch(setAppStatusAC('loading'));\n\n  try {\n    const {\n      data: { resultCode, messages, data },\n    } = await todolistsAPI.createTask(todolistId, title);\n\n    if (resultCode === ResultCode.Success) {\n      dispatch(addTaskAC(data.item));\n      dispatch(setAppStatusAC('succeeded'));\n    } else {\n      handleServerAppError(messages, dispatch);\n    }\n  } catch (error) {\n    handleServerNetworkError(error, dispatch);\n  }\n};\n\nexport const updateTaskAsync = (\n  taskId: string,\n  domainModel: UpdateDomainTaskModelType,\n  todolistId: string,\n): ThunkType<ActionsType> => async (dispatch, getState) => {\n  const allTaskFromState = getState().tasks;\n  const tasksForCurrentTodolist = allTaskFromState[todolistId];\n  const task = tasksForCurrentTodolist.find((t) => t.id === taskId);\n\n  if (task) {\n    const { title, description, status, priority, startDate, deadline } = task;\n    const model: UpdateTaskModelType = {\n      title,\n      description,\n      status,\n      priority,\n      startDate,\n      deadline,\n      ...domainModel,\n    };\n\n    try {\n      const {\n        data: { resultCode, messages },\n      } = await todolistsAPI.updateTask(todolistId, taskId, model);\n\n      if (resultCode === ResultCode.Success) {\n        dispatch(updateTaskAC(taskId, domainModel, todolistId));\n      } else {\n        handleServerAppError(messages, dispatch);\n      }\n    } catch (error) {\n      handleServerNetworkError(error, dispatch);\n    }\n  }\n};\n\n/** Types */\ntype ActionsType =\n  | ReturnType<typeof removeTaskAC>\n  | ReturnType<typeof addTaskAC>\n  | ReturnType<typeof updateTaskAC>\n  | ReturnType<typeof setTasksAC>\n  | ReturnType<typeof addTodolistAC>\n  | ReturnType<typeof removeTodolistAC>\n  | ReturnType<typeof setTodolistsAC>\n  | ReturnType<typeof setAppErrorAC>\n  | ReturnType<typeof setAppStatusAC>;\n\nexport type TasksStateType = Record<string, Array<TaskType>>;\n\ntype UpdateDomainTaskModelType = {\n  title?: string;\n  description?: string;\n  status?: TaskStatus;\n  priority?: TaskPriority;\n  startDate?: string;\n  deadline?: string;\n};\n","import React, { ChangeEvent, FC, KeyboardEvent, useState } from 'react';\nimport { IconButton, TextField } from '@material-ui/core';\nimport { AddBox } from '@material-ui/icons';\n\nexport type AddItemFormPropsType = {\n  addItem: (title: string) => void;\n  disabled?: boolean;\n};\n\nexport const AddItemForm: FC<AddItemFormPropsType> = React.memo(\n  ({ addItem, disabled = false }) => {\n    const [title, setTitle] = useState<string>('');\n    const [error, setError] = useState<string | null>(null);\n\n    const addItemHandler = () => {\n      const trimmedTitle = title.trim();\n      if (trimmedTitle) {\n        addItem(trimmedTitle);\n      } else {\n        setError('Title is required!');\n      }\n      setTitle('');\n    };\n\n    const changeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n      setTitle(e.currentTarget.value);\n    };\n    const keyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n      if (error !== null) setError(null);\n      if (e.key === 'Enter') addItemHandler();\n    };\n\n    return (\n      <div>\n        <TextField\n          variant=\"outlined\"\n          error={!!error}\n          value={title}\n          onChange={changeHandler}\n          onKeyPress={keyPressHandler}\n          label=\"Title\"\n          helperText={error}\n          disabled={disabled}\n        />\n        <IconButton\n          color=\"primary\"\n          onClick={addItemHandler}\n          disabled={disabled}\n        >\n          <AddBox />\n        </IconButton>\n      </div>\n    );\n  },\n);\n","import React, { ChangeEvent, FC, useState } from 'react';\nimport { TextField, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n  text: {\n    wordBreak: 'break-word',\n    fontSize: '1rem',\n  },\n}));\n\nexport type EditableSpanPropsType = {\n  value: string;\n  onChange: (title: string) => void;\n};\n\nexport const EditableSpan: FC<EditableSpanPropsType> = React.memo((props) => {\n  const classes = useStyles();\n\n  const [editMode, setEditMode] = useState(false);\n  const [title, setTitle] = useState<string>(props.value);\n\n  const onEditMode = () => {\n    setEditMode(true);\n  };\n\n  const offEditMode = () => {\n    setEditMode(false);\n    const newTitle = title.trim();\n\n    if (newTitle) props.onChange(newTitle);\n  };\n\n  const changeTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.currentTarget.value);\n  };\n\n  return editMode ? (\n    <TextField\n      type=\"text\"\n      value={title}\n      onBlur={offEditMode}\n      onChange={changeTitleHandler}\n      autoFocus\n    />\n  ) : (\n    <Typography\n      variant=\"caption\"\n      className={classes.text}\n      onDoubleClick={onEditMode}\n    >\n      {props.value}\n    </Typography>\n  );\n});\n","import React, { ChangeEvent, FC, useCallback } from 'react';\nimport { Checkbox, IconButton } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Delete } from '@material-ui/icons';\n\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan';\nimport { TaskStatus, TaskType } from '../../../../api/todolistsApi';\n\nconst useStyles = makeStyles(() => ({\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  removeTaskButton: {\n    marginLeft: 'auto',\n  },\n}));\n\nexport type TaskPropsType = {\n  task: TaskType;\n  todolistId: string;\n  removeTask: (taskId: string, todolistId: string) => void;\n  changeStatus: (\n    taskId: string,\n    status: TaskStatus,\n    todolistId: string,\n  ) => void;\n  changeTaskTitle: (taskId: string, title: string, todolistId: string) => void;\n};\n\nexport const Task: FC<TaskPropsType> = React.memo((props) => {\n  const classes = useStyles();\n\n  const removeTaskHandler = useCallback(() => {\n    props.removeTask(props.task.id, props.todolistId);\n  }, [props]);\n\n  const statusTaskHandler = useCallback(\n    (e: ChangeEvent<HTMLInputElement>) => {\n      props.changeStatus(\n        props.task.id,\n        e.currentTarget.checked ? TaskStatus.Completed : TaskStatus.New,\n        props.todolistId,\n      );\n    },\n    [props],\n  );\n\n  const changeTaskTitle = useCallback(\n    (title: string) => {\n      props.changeTaskTitle(props.task.id, title, props.todolistId);\n    },\n    [props],\n  );\n\n  return (\n    <li\n      className={`${classes.root} ${\n        props.task.status === TaskStatus.Completed ? 'is-done' : ''\n      }`}\n    >\n      <Checkbox\n        color=\"primary\"\n        onChange={statusTaskHandler}\n        checked={props.task.status === TaskStatus.Completed}\n      />\n      <EditableSpan value={props.task.title} onChange={changeTaskTitle} />\n      <IconButton\n        onClick={removeTaskHandler}\n        className={classes.removeTaskButton}\n      >\n        <Delete />\n      </IconButton>\n    </li>\n  );\n});\n","import React, { FC, useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Button, ButtonGroup, IconButton, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Delete } from '@material-ui/icons';\n\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm';\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan';\nimport { Task } from './Task/Task';\nimport { TaskStatus, TaskType } from '../../../api/todolistsApi';\nimport { FilterValuesType, TodolistDomainType } from '../todolistsReducer';\nimport { fetchTasksAsync } from '../tasksReducer';\n\nconst useStyles = makeStyles(() => ({\n  todoListTitle: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  removeTodoListButton: {\n    marginLeft: 'auto',\n  },\n  taskList: {\n    paddingLeft: 0,\n    listStyleType: 'none',\n  },\n  buttonGroupWrapper: {\n    textAlign: 'center',\n  },\n  buttonGroup: {\n    display: 'flex',\n  },\n  button: {\n    flexGrow: 1,\n  },\n}));\n\ntype TodolistPropsType = {\n  todolist: TodolistDomainType;\n  tasks: Array<TaskType>;\n  demo?: boolean;\n  removeTodoList: (todolistId: string) => void;\n  addTask: (title: string, todolistId: string) => void;\n  removeTask: (taskId: string, todolistId: string) => void;\n  changeFilter: (filterValue: FilterValuesType, todolistId: string) => void;\n  changeStatus: (\n    taskId: string,\n    status: TaskStatus,\n    todolistId: string,\n  ) => void;\n  changeTaskTitle: (taskId: string, title: string, todolistId: string) => void;\n  changeTodoListTitle: (todolistId: string, title: string) => void;\n};\n\nexport const Todolist: FC<TodolistPropsType> = React.memo(\n  ({ demo = false, ...props }) => {\n    const classes = useStyles();\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n      if (!demo) dispatch(fetchTasksAsync(props.todolist.id));\n    }, [dispatch, demo, props.todolist.id]);\n\n    const addTask = useCallback(\n      (title: string) => {\n        props.addTask(title, props.todolist.id);\n      },\n      [props],\n    );\n    const removeTodoListHandler = useCallback(\n      () => props.removeTodoList(props.todolist.id),\n      [props],\n    );\n\n    const changeTodoListTitle = useCallback(\n      (title: string) => {\n        props.changeTodoListTitle(props.todolist.id, title);\n      },\n      [props],\n    );\n\n    const allClickHandler = useCallback(\n      () => props.changeFilter('all', props.todolist.id),\n      [props],\n    );\n    const activeClickHandler = useCallback(\n      () => props.changeFilter('active', props.todolist.id),\n      [props],\n    );\n    const completedClickHandler = useCallback(\n      () => props.changeFilter('completed', props.todolist.id),\n      [props],\n    );\n\n    let tasksForTodolist = props.tasks;\n\n    if (props.todolist.filter === 'active') {\n      tasksForTodolist = props.tasks.filter((t) => t.status === TaskStatus.New);\n    }\n\n    if (props.todolist.filter === 'completed') {\n      tasksForTodolist = props.tasks.filter(\n        (t) => t.status === TaskStatus.Completed,\n      );\n    }\n\n    const tasks = tasksForTodolist.map((t) => {\n      return (\n        <Task\n          key={t.id}\n          task={t}\n          todolistId={props.todolist.id}\n          removeTask={props.removeTask}\n          changeTaskTitle={props.changeTaskTitle}\n          changeStatus={props.changeStatus}\n        />\n      );\n    });\n\n    return (\n      <div>\n        <Typography variant=\"h6\" className={classes.todoListTitle}>\n          <EditableSpan\n            value={props.todolist.title}\n            onChange={changeTodoListTitle}\n          />\n          <IconButton\n            onClick={removeTodoListHandler}\n            className={classes.removeTodoListButton}\n            disabled={props.todolist.entityStatus === 'loading'}\n          >\n            <Delete />\n          </IconButton>\n        </Typography>\n        <AddItemForm\n          addItem={addTask}\n          disabled={props.todolist.entityStatus === 'loading'}\n        />\n        <ul className={classes.taskList}>{tasks}</ul>\n        <div className={classes.buttonGroupWrapper}>\n          <ButtonGroup\n            size=\"small\"\n            color=\"primary\"\n            className={classes.buttonGroup}\n          >\n            <Button\n              variant={\n                props.todolist.filter === 'all' ? 'contained' : 'outlined'\n              }\n              onClick={allClickHandler}\n              className={classes.button}\n            >\n              All\n            </Button>\n            <Button\n              variant={\n                props.todolist.filter === 'active' ? 'contained' : 'outlined'\n              }\n              onClick={activeClickHandler}\n              className={classes.button}\n            >\n              Active\n            </Button>\n            <Button\n              variant={\n                props.todolist.filter === 'completed' ? 'contained' : 'outlined'\n              }\n              onClick={completedClickHandler}\n              className={classes.button}\n            >\n              Completed\n            </Button>\n          </ButtonGroup>\n        </div>\n      </div>\n    );\n  },\n);\n","import React, { FC, useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { Grid, Paper } from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\n\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\nimport {\n  addTodolistAsync,\n  changeTodolistFilterAC,\n  changeTodolistTitleAsync,\n  fetchTodolistsAsync,\n  FilterValuesType,\n  removeTodolistAsync,\n  TodolistDomainType,\n} from './todolistsReducer';\nimport {\n  addTaskAsync,\n  removeTaskAsync,\n  TasksStateType,\n  updateTaskAsync,\n} from './tasksReducer';\nimport { TaskStatus } from '../../api/todolistsApi';\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm';\nimport { Todolist } from './Todolist/Todolist';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  addTodoListContainer: {\n    padding: theme.spacing(2),\n  },\n  paper: {\n    padding: theme.spacing(2),\n  },\n}));\n\ntype TodolistsListPropsType = {\n  demo?: boolean;\n};\n\nexport const TodolistsList: FC<TodolistsListPropsType> = ({ demo = false }) => {\n  const classes = useStyles();\n\n  const todolists = useTypedSelector<Array<TodolistDomainType>>(\n    (state) => state.todolists,\n  );\n  const tasks = useTypedSelector<TasksStateType>((state) => state.tasks);\n\n  const isLoggedIn = useTypedSelector<boolean>(\n    (state) => state.auth.isLoggedIn,\n  );\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!demo && isLoggedIn) dispatch(fetchTodolistsAsync());\n  }, [dispatch, demo, isLoggedIn]);\n\n  const removeTask = useCallback(\n    (taskId: string, todolistId: string) => {\n      dispatch(removeTaskAsync(taskId, todolistId));\n    },\n    [dispatch],\n  );\n\n  const addTask = useCallback(\n    (title: string, todolistId: string) => {\n      dispatch(addTaskAsync(title, todolistId));\n    },\n    [dispatch],\n  );\n\n  const changeStatus = useCallback(\n    (taskId: string, status: TaskStatus, todolistId: string) => {\n      dispatch(updateTaskAsync(taskId, { status }, todolistId));\n    },\n    [dispatch],\n  );\n\n  const changeTaskTitle = useCallback(\n    (taskId: string, title: string, todolistId: string) => {\n      dispatch(updateTaskAsync(taskId, { title }, todolistId));\n    },\n    [dispatch],\n  );\n\n  const changeFilter = useCallback(\n    (filter: FilterValuesType, id: string) => {\n      dispatch(changeTodolistFilterAC(filter, id));\n    },\n    [dispatch],\n  );\n\n  const removeTodoList = useCallback(\n    (todolistId: string) => {\n      dispatch(removeTodolistAsync(todolistId));\n    },\n    [dispatch],\n  );\n\n  const changeTodoListTitle = useCallback(\n    (id: string, title: string) => {\n      dispatch(changeTodolistTitleAsync(id, title));\n    },\n    [dispatch],\n  );\n\n  const addTodoList = useCallback(\n    (title: string) => {\n      dispatch(addTodolistAsync(title));\n    },\n    [dispatch],\n  );\n\n  if (!isLoggedIn) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n    <>\n      <Grid container className={classes.addTodoListContainer}>\n        <AddItemForm addItem={addTodoList} />\n      </Grid>\n\n      <Grid container spacing={3}>\n        {todolists.map((tl) => {\n          const tasksForTodolist = tasks[tl.id];\n\n          return (\n            <Grid item key={tl.id}>\n              <Paper className={classes.paper}>\n                <Todolist\n                  todolist={tl}\n                  demo={demo}\n                  tasks={tasksForTodolist}\n                  removeTask={removeTask}\n                  changeFilter={changeFilter}\n                  addTask={addTask}\n                  changeStatus={changeStatus}\n                  removeTodoList={removeTodoList}\n                  changeTaskTitle={changeTaskTitle}\n                  changeTodoListTitle={changeTodoListTitle}\n                />\n              </Paper>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </>\n  );\n};\n","import React, { FC, SyntheticEvent } from 'react';\nimport { useDispatch } from 'react-redux';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\n\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\nimport { setAppErrorAC } from '../../app/appReducer';\n\nconst Alert: FC<AlertProps> = (props) => {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n};\n\nexport const ErrorSnackbar: FC = () => {\n  const dispatch = useDispatch();\n\n  const error = useTypedSelector<null | string>((state) => state.app.error);\n\n  const isOpen = error !== null;\n\n  const handleClose = (event?: SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    dispatch(setAppErrorAC(null));\n  };\n\n  return (\n    <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\n      <Alert onClose={handleClose} severity=\"error\">\n        {error}\n      </Alert>\n    </Snackbar>\n  );\n};\n","import React, { FC } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { FormikHelpers, useFormik } from 'formik';\nimport * as yup from 'yup';\nimport {\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormLabel,\n  TextField,\n  Button,\n  Grid,\n  Link,\n} from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { LoginValuesType } from '../../api/todolistsApi';\nimport { loginAsync } from './authReducer';\nimport { useTypedSelector } from '../../hooks/useTypedSelector';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  checkboxLabel: {\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nconst initialValues: LoginValuesType = {\n  email: '',\n  password: '',\n  rememberMe: false,\n};\n\nconst validationSchema = yup.object({\n  email: yup\n    .string()\n    .email('Enter a valid email')\n    .required('Email is required'),\n  password: yup\n    .string()\n    .min(3, 'Password should be of minimum 3 characters length')\n    .required('Password is required'),\n});\n\nexport const Login: FC = () => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  const isLoggedIn = useTypedSelector<boolean>(\n    (state) => state.auth.isLoggedIn,\n  );\n\n  const onSubmit = (\n    values: LoginValuesType,\n    formikHelpers: FormikHelpers<LoginValuesType>,\n  ): void => {\n    dispatch(loginAsync(values));\n    if (isLoggedIn) formikHelpers.resetForm();\n  };\n\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    onSubmit,\n  });\n\n  if (isLoggedIn) {\n    return <Redirect to=\"/\" />;\n  }\n\n  return (\n    <Grid container justify=\"center\">\n      <Grid item xs={4}>\n        <form onSubmit={formik.handleSubmit}>\n          <FormControl>\n            <FormLabel>\n              <p>\n                To log in get registered&nbsp;\n                <Link\n                  href=\"https://social-network.samuraijs.com/\"\n                  target=\"_blank\"\n                  rel=\"noreferrer noopener\"\n                >\n                  here\n                </Link>\n              </p>\n              <p>or use common test account credentials:</p>\n              <p>Email: free@samuraijs.com</p>\n              <p>Password: free</p>\n            </FormLabel>\n            <FormGroup>\n              <TextField\n                label=\"Email\"\n                margin=\"normal\"\n                {...formik.getFieldProps('email')}\n                error={formik.touched.email && Boolean(formik.errors.email)}\n                helperText={formik.touched.email && formik.errors.email}\n              />\n              <TextField\n                type=\"password\"\n                label=\"Password\"\n                margin=\"normal\"\n                {...formik.getFieldProps('password')}\n                error={\n                  formik.touched.password && Boolean(formik.errors.password)\n                }\n                helperText={formik.touched.password && formik.errors.password}\n              />\n              <FormControlLabel\n                className={classes.checkboxLabel}\n                label=\"Remember me\"\n                control={<Checkbox />}\n                {...formik.getFieldProps('rememberMe')}\n              />\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\n                Login\n              </Button>\n            </FormGroup>\n          </FormControl>\n        </form>\n      </Grid>\n    </Grid>\n  );\n};\n","import React, { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Theme, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) => {\n  return {\n    '@global': {\n      body: {\n        backgroundColor: theme.palette.primary.dark,\n      },\n    },\n    root: {\n      boxSizing: 'border-box',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      height: `calc(100vh - 56px)`,\n      '@media (min-width:600px)': {\n        height: `calc(100vh - 64px)`,\n      },\n    },\n    title: {\n      paddingTop: theme.spacing(6),\n      paddingBottom: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.grey['50'],\n    },\n    text: {\n      textAlign: 'center',\n      color: theme.palette.grey['50'],\n    },\n    footer: {\n      marginTop: 'auto',\n      paddingTop: theme.spacing(3),\n      paddingBottom: theme.spacing(3),\n    },\n    footerText: {\n      fontSize: '1.2rem',\n      color: theme.palette.grey['500'],\n    },\n    link: {\n      position: 'relative',\n      color: theme.palette.grey['50'],\n      textDecoration: 'none',\n      '&:after': {\n        content: '\"\"',\n        position: 'absolute',\n        zIndex: 1,\n        bottom: 0,\n        left: 0,\n        width: '100%',\n        height: '1px',\n        backgroundColor: theme.palette.grey['50'],\n        opacity: 0,\n        transitionDuration: theme.transitions.duration.standard,\n        transitionProperty: 'opacity, bottom',\n      },\n      '&:focus': {\n        outline: 'none',\n      },\n      '&:hover:after,&:focus:after': {\n        bottom: '-2px',\n        opacity: 1,\n      },\n    },\n  };\n});\n\nexport const Error404: FC = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <div>\n        <Typography variant=\"h2\" component=\"h1\" className={classes.title}>\n          404 - Page not&nbsp;found\n        </Typography>\n        <Typography variant=\"h2\" component=\"p\" className={classes.text}>\n          —<span>Uh oh.</span> <span>¯\\_(ツ)_/¯</span>—\n        </Typography>\n      </div>\n      <footer className={classes.footer}>\n        <Typography variant=\"body1\" className={classes.footerText}>\n          Take me back to:&nbsp;\n          <Link className={classes.link} to=\"/\">\n            home page\n          </Link>\n        </Typography>\n      </footer>\n    </div>\n  );\n};\n","import React, { FC, useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {\n  HashRouter as Router,\n  Route,\n  Switch,\n  Redirect,\n} from 'react-router-dom';\nimport {\n  AppBar,\n  Button,\n  CircularProgress,\n  Container,\n  IconButton,\n  LinearProgress,\n  Theme,\n  Toolbar,\n  Typography,\n} from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Menu } from '@material-ui/icons';\n\nimport { useTypedSelector } from '../hooks/useTypedSelector';\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList';\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar';\nimport { initializeAppAsync, RequestStatusType } from './appReducer';\nimport { Login } from '../features/Login/Login';\nimport { logoutAsync } from '../features/Login/authReducer';\nimport { Error404 } from '../features/Error404/Error404';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    flexGrow: 1,\n    fontFamily: '\"Roboto\", sans-serif',\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  appBar: {\n    position: 'relative',\n  },\n  linearProgress: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n  },\n  circularProgressWrapper: {\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    minHeight: '100vh',\n  },\n}));\n\nexport type AppPropsType = {\n  demo?: boolean;\n};\n\nexport const App: FC<AppPropsType> = ({ demo = false }) => {\n  const classes = useStyles();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initializeAppAsync());\n  }, [dispatch]);\n\n  const status = useTypedSelector<RequestStatusType>(\n    (state) => state.app.status,\n  );\n\n  const isInitialized = useTypedSelector<boolean>(\n    (state) => state.app.isInitialized,\n  );\n\n  const isLoggedIn = useTypedSelector<boolean>(\n    (state) => state.auth.isLoggedIn,\n  );\n\n  const logoutHandler = useCallback(() => {\n    dispatch(logoutAsync());\n  }, [dispatch]);\n\n  if (!isInitialized) {\n    return (\n      <div className={classes.circularProgressWrapper}>\n        <CircularProgress size={160} />\n      </div>\n    );\n  }\n\n  return (\n    <Router>\n      <div className={classes.root}>\n        <AppBar position=\"static\" className={classes.appBar}>\n          <Toolbar>\n            <IconButton\n              edge=\"start\"\n              className={classes.menuButton}\n              color=\"inherit\"\n              aria-label=\"menu\"\n            >\n              <Menu />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n              Todolist\n            </Typography>\n\n            {isLoggedIn && (\n              <Button color=\"inherit\" onClick={logoutHandler}>\n                Log out\n              </Button>\n            )}\n          </Toolbar>\n\n          {status === 'loading' && (\n            <LinearProgress className={classes.linearProgress} />\n          )}\n        </AppBar>\n        <Container fixed>\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              render={() => <TodolistsList demo={demo} />}\n            />\n            <Route path=\"/login\" render={() => <Login />} />\n\n            <Route path=\"/404\" render={() => <Error404 />} />\n            <Redirect from=\"*\" to=\"/404\" />\n          </Switch>\n        </Container>\n        <ErrorSnackbar />\n      </div>\n    </Router>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  createStore,\n  combineReducers,\n  applyMiddleware,\n  compose,\n  Middleware,\n  Action,\n} from 'redux';\nimport thunk, { ThunkAction, ThunkMiddleware } from 'redux-thunk';\n\n/* eslint-disable import/no-cycle */\nimport { todolistsReducer } from '../features/TodolistsList/todolistsReducer';\nimport { tasksReducer } from '../features/TodolistsList/tasksReducer';\nimport { appReducer } from './appReducer';\nimport { authReducer } from '../features/Login/authReducer';\n/* eslint-enable import/no-cycle */\n\nconst DEV = process.env.NODE_ENV !== 'production';\n\nconst rootReducer = combineReducers({\n  todolists: todolistsReducer,\n  tasks: tasksReducer,\n  app: appReducer,\n  auth: authReducer,\n});\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore next line\nconst devtools = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\nconst composeEnhancers = DEV && devtools ? devtools : compose;\n\nconst middleware: Array<Middleware> = [\n  thunk as ThunkMiddleware<AppRootStateType>,\n];\n\nexport const enhancedStore = composeEnhancers(applyMiddleware(...middleware));\n\nexport const store = createStore(rootReducer, enhancedStore);\n\n/** Types */\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\n\nexport type ThunkType<\n  A extends Action = Action,\n  R = Promise<void>,\n  S = AppRootStateType\n> = ThunkAction<R, S, unknown, A>;\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport { App } from './app/App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './app/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}